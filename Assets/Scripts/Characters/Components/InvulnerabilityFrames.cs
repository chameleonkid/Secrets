using System.Collections;
using UnityEngine;

[RequireComponent(typeof(Character))]
public class InvulnerabilityFrames : MonoBehaviour
{
    [SerializeField] private Color flashColor = new Color(1, 1, 1, 0);
    [SerializeField] private float invulnerabilityDuration = 0.5f;
    [SerializeField] private int numberOfFlashes = 10;
    [SerializeField] private SpriteRenderer[] renderers = default;
    private Color[] initialColors;

    private Character character;

    private void OnValidate()
    {
        if (renderers == null || renderers.Length <= 0)
        {
            var sr = GetComponent<SpriteRenderer>();
            if (sr != null)
            {
                renderers = new SpriteRenderer[1];
                renderers[0] = sr;
            }
        }
    }

    private void Start()
    {
        character = GetComponent<Character>();
        initialColors = new Color[renderers.Length];
        for (int i = 0; i < renderers.Length; i++)
        {
            initialColors[i] = renderers[i].color;
        }
    }

    public void TriggerInvulnerability() {
        if (this.gameObject.activeInHierarchy) {
            StartCoroutine(InvulnerableCo());
        }
    }

    private IEnumerator InvulnerableCo()
    {
        character.isInvulnerable = true;

        var halfFlashYield = new WaitForSeconds((invulnerabilityDuration / numberOfFlashes) / 2);
        for (int f = 0; f < numberOfFlashes; f++)
        {
            for (int i = 0; i < renderers.Length; i++)
            {
                var tempColor = renderers[i].color;
                tempColor.a = flashColor.a;
                renderers[i].color = tempColor;
            }
            yield return halfFlashYield;

            for (int i = 0; i < renderers.Length; i++)
            {
                renderers[i].color = initialColors[i];
            }
            yield return halfFlashYield;
        }

        character.isInvulnerable = false;
    }
}
